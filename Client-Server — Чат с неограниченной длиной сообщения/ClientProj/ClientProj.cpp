//Открывает доступ к некоторым функциям
#pragma comment(lib, "ws2_32.lib")
//Подключаю библиотеку для работы с сетью
#include <WinSock2.h>
//Библиотека ввода и вывода
#include <iostream>
//Для робот со строками
#include <string>

//Убираю ошибку
#pragma warning(disable: 4996)

SOCKET Connection;

//Функция для принятия отправленного сервером сообщения
void ClientHandler() {
	//Переменная для хранения размера строки
	int msg_size;
	//Бесконечный цикл
	while (true) {
		//Принимаю размер сообщения
		recv(Connection, (char*)&msg_size, sizeof(int), NULL);
		//Создаю динамический массив для принятия сообщения
		char* msg = new char[msg_size + 1];
		msg[msg_size] = '\0';
		//Принимаю сообщеня от сервера
		recv(Connection, msg, msg_size, NULL);
		//Вывожу их на экран
		std::cout << msg << std::endl;
		//Очищяю выделенную память
		delete[] msg;
	}
}

int main() {
	//Делаю так, чтобы читался русский язык как при вводе текста, так и при выводе
	//Установка кодовой страницы win-cp 1251 в поток ввода
	SetConsoleCP(1251);
	//Установка кодовой страницы win-cp 1251 в поток вывода
	SetConsoleOutputCP(1251); 

	/*//Функция для загрузки библиотеки
	WSAStartup*/

	//Создаю структуру wsaData
	WSAData wsaData;
	//Создаю переменную WORD
	WORD DLLVEersion =
		//Это запрашиваемая версия библиотеки WinSock
		MAKEWORD(2, 1);
	//Делаю проверку. Если библиотека загрузилась удачно
	if (
		//Функция для загрузки библиотеки
		WSAStartup(
			//Передаю запрашиваемую версию библиотеки
			DLLVEersion,
			//Ссылка на структуру wsaData
			&wsaData)
		//Тогда она вернет значение 0
		!= 0
		)
	{
		//Если WSAStartup не вернет значение 0
		//Вывожу ошибку, что библиотека не загрузилась
		std::cout << "Ошибка. Библиотека не загрузилась!" << std::endl;
		//Выхожу из функции main
		exit(1);
	}

	//Структура, которая зранит информацию об адресе сокета
	//SOCKADDR_IN используется для интернет протокола
	SOCKADDR_IN addr;
	//Переменная, хранящая размер структуры SOCKADDR
	int sizeOfAddr = sizeof(addr);
	//sin_addr - это структура SOCKADDR_IN, которая хранит IP адрес
	addr.sin_addr.s_addr = inet_addr(
		//Здесь указан localhost, тоесть "этот компьютер"
		"127.0.0.1"
	);
	//sin_port - порт для идентификации программы поступающими данными
	addr.sin_port = htons(
		//Можно использовать любой порт, который не зарезервирован программой
		1111
	);
	//sin_family - семейство протоколов
	addr.sin_family =
		//Для интернет протоколов указывается константа AF_INET
		AF_INET;

	//Создаю новый сокет для соединения с сервером
	Connection = socket(
		//AF_INET означает, что будет использоваться семейство интернет протоколов
		AF_INET,
		//SOCK_STREAM указывает на протокол, устанавливающий интернет соединение
		SOCK_STREAM,
		//Этот параметр пока не нужен, поэтому NULL
		NULL
	);

	//Проверка на случай, если клиент не сможет соединиться с сервером
	if (
		//После создания сокета, нужно попытаться присоединиться к серверу
		connect(Connection, (SOCKADDR*)&addr, sizeof(addr)) 
		//Если не удалось подключиться
		!= 0
		) 
	{
		//Тогда вывожу ошибку
		std::cout << "Ошибка: не получилось подключиться к серверу!\n";
		//И выхожу из программы
		return 1;
	}

	//В случае успеха вывожу в консоль, что подключился к серверу
	std::cout << "Подключение установлено!\n";

	//Запускаю функцию ClientHandler в новом потоке. ClientHandler не принимает никаких парам.
	CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)ClientHandler, NULL, NULL, NULL);

	//Переменная для хранения сообщения
	std::string mesge;
	//Бесконечный цикл для считывания написанных пользователем символов и записи в переменную
	while (true) {
		//Записываю в неё написанную пользователем строку
		std::getline(std::cin, mesge);
		//Создаю переменную для хранеиня размера стоки и присваиваю размер
		int mesge_size = mesge.size();
		//Посылаю строку mesge_size серверу, 
		//чтобы он знал размер той строки, которую будет принимать
		send(Connection, 
			//char указатель на переменную mesge_size
			(char*)&mesge_size,
			//размер переменной mesge_size в байтах
			sizeof(int), 
			NULL);
		//Отправляю саму строку
		send(Connection, 
			//С помощью ф-ции c_str преобразую переменную string в char
			mesge.c_str(), 
			mesge_size, NULL);
		//Небольшая пауза после отправки сообщения
		Sleep(10);
	}

	system("pause");
	return 0;
}